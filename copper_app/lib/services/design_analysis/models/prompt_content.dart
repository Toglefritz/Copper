import 'package:copper_app/services/kicad_parser/kicad_component_pad.dart';
import 'package:copper_app/services/kicad_parser/kicad_pcb_component.dart';
import 'package:copper_app/services/kicad_parser/kicad_pcb_design.dart';
import 'package:copper_app/services/kicad_parser/kicad_pcb_net.dart';

/// Represents a prompt to be sent to an Azure OpenAI Service LLM to analyze a PCB design.
///
/// The prompt is generated by combining information from the parsed PCB design file and the user's questions/requests.
/// The parsed PCB design information is used to create content to be sent to the LLM system so it can understand the
/// current state of the PCB design. The user's questions/requests are sent alongside this content and the LLM will
/// generate a response based on the prompt.
class PromptContent {
  /// A description of the project proivded by the user.
  final String? projectDescription;

  /// A list of components (footprints) placed on the PCB, described as a list of natural language strings, enabling
  /// the LLM to understand the components present in the design.
  final List<String> componentDescriptions;

  /// A list of strings describing the electrical connections (nets) within the PCB, enabling the LLM to understand
  /// the connections between components.
  final List<String> netDescriptions;

  /// A query from the user about the PCB design, enabling the LLM to understand the user's questions and generate
  /// a response.
  final String userQuery;

  /// Creates an instance of the [PromptContent] class.
  PromptContent._({
    required this.componentDescriptions,
    required this.netDescriptions,
    required this.userQuery,
    this.projectDescription,
  });

  /// Generates a prompt to be sent to an Azure OpenAI Service LLM from the provided [KiCadPCBDesign] object and
  /// the user's questions/requests.
  factory PromptContent.fromKiCadPCBDesign({
    required KiCadPCBDesign pcbDesign,
    required String userQuery,
  }) {
    // If the user has provided a project description, add it to the prompt.
    String? projectDescription;
    if (pcbDesign.projectDescription != null) {
      projectDescription = 'The user has provided the following project description: ${pcbDesign.projectDescription}. ';
    }

    // Generate component descriptions from the parsed PCB design.
    final List<String> componentDescriptions = [
      'The PCB design contains the following components: ',
    ];
    for (final KiCadPCBComponent component in pcbDesign.components) {
      componentDescriptions.add(
        'A ${component.name} at position (${component.position.x}, ${component.position.y}) on the ${component.layer} layer, with reference identifier ${component.reference}. ',
      );
    }

    // Generate a list of net descriptions from the parsed PCB design that describe the connections among components.
    final List<String> netDescriptions = [
      'The PCB design contains the following electrical connections among components: ',
    ];
    for (final KiCadPCBNet net in pcbDesign.nets) {
      // If the net name is null, skip it.
      if (net.name == null) {
        continue;
      }

      String netComponentList = 'The ${net.name} net connects the following components: ';
      for (final KiCadPCBComponent component in pcbDesign.components) {
        if (component.pads.any((KiCadComponentPad pad) => pad.net?.name == net.name || pad.net?.code == net.code)) {
          netComponentList += '${component.name}, ';
        }
      }
      netDescriptions.add(netComponentList);
    }

    // Add the user's query to the prompt.
    final String userQueryFormatted = 'The user has provided the following query: $userQuery';

    return PromptContent._(
      projectDescription: projectDescription,
      componentDescriptions: componentDescriptions,
      netDescriptions: netDescriptions,
      userQuery: userQueryFormatted,
    );
  }

  /// Converts the prompt content to a string to be sent to the LLM.
  @override
  String toString() {
    final StringBuffer promptBuffer = StringBuffer();

    // Add the project description to the prompt if it is avaialble.
    if (projectDescription != null) {
      promptBuffer.writeln(projectDescription);
    }

    // Add component descriptions to the prompt.
    for (final componentDescription in componentDescriptions) {
      promptBuffer.writeln(componentDescription);
    }

    // Add net descriptions to the prompt.
    for (final netDescription in netDescriptions) {
      promptBuffer.writeln(netDescription);
    }

    // Add the user query to the prompt.
    promptBuffer.writeln(userQuery);

    return promptBuffer.toString();
  }
}
