/**
 * This Azure Function serves as an HTTP endpoint that accepts a prompt from the caller (the Copper app)
 * and returns a completion generated by the Azure OpenAI Service.
 * 
 * The function operates as follows:
 * 1. It receives an HTTP POST request containing a JSON body with a "prompt" field.
 * 2. It validates the presence of the "prompt" field in the request body.
 * 3. It retrieves the OpenAI API key from Azure Key Vault using managed identity.
 * 4. It initializes the OpenAIClient using the endpoint and retrieved API key.
 * 5. It sends the prompt to the Azure OpenAI Service and requests a completion.
 * 6. It returns the generated completion text in the HTTP response.
 * 
 * The purpose of this endpoint in the overall Copper is to:
 * 
 * - Provide a secure way to interact with the Azure OpenAI Service.
 * - Protect the Azure OpenAI API Key by storing it only on backend systems rather than in client apps.
 * 
 * By using this function, the client app can leverage the capabilities of the Azure OpenAI Service
 * without exposing sensitive credentials, ensuring better security and compliance.
 * 
 * Example request:
 * {
 *  "prompt": "What is the air speed velocity of an unladen swallow?"
 * }
 */

const { DefaultAzureCredential } = require("@azure/identity");
const { SecretClient } = require("@azure/keyvault-secrets");
const axios = require('axios');

// Get the Key Vault name from the environment variables
const keyVaultName = process.env.KEY_VAULT_NAME;
if (!keyVaultName) {
    throw new Error("KEY_VAULT_NAME environment variable is not set.");
}

// Get the Key Vault URL
const keyVaultUrl = `https://${keyVaultName}.vault.azure.net`;

module.exports = async function (context, req) {
    // Get the prompt from the request body
    const prompt = req.body.prompt;

    // If the prompt is not provided, return a 400 Bad Request response
    if (!prompt) {
        context.res = {
            status: 400,
            body: "Please provide a prompt in the request body."
        };
        return;
    }

    const credential = new DefaultAzureCredential();
    const client = new SecretClient(keyVaultUrl, credential);

    // Retrieve the OpenAI API key from Azure Key Vault
    let apiKey;
    try {
        // Retrieve the OpenAI API key from Azure Key Vault
        const secret = await client.getSecret("AZURE-AI-KEY");
        apiKey = secret.value;
    } catch (error) {
        // If there is an error retrieving the API key, return a 500 Internal Server Error response
        context.res = {
            status: 500,
            body: `Error retrieving API key: ${error.message}`
        };
        return;
    }

    // The deployment name of the LLM model.
    const deploymentName = "gpt-4o";

    // The version of the LLM model to use.
    const modelVersion = "2024-08-01-preview";

    // The endpoint for the LLM REST API via Azure AI Foundry 
    const endpoint = "https://copper.openai.azure.com/openai/deployments/" + deploymentName + "/chat/completions?api-version=" + modelVersion;

    // Assemble the payload for the LLM REST API.
    var payload = {
        "messages": [
            {
                "role": "user",
                "content": prompt
            }
        ],
        "temperature": 0.7,
        "top_p": 0.95,
        "stream": false,
        "max_tokens": 2800,
    }

    // Serialize the request payload to JSON.
    const requestBody = JSON.stringify(payload);

    // Set the API key in the request headers
    const headers = {
        "Content-Type": "application/json",
        "api-key": apiKey
    }

    // Send the completions POST request.
    const response = await axios.post(endpoint, requestBody, { 
        headers: headers
    });

    // If the response status code is not 200 OK, return an error response
    if (response.status !== 200) {
        context.res = {
            status: response.status, 
            body: `Error: ${response.statusText}`
        };
        return;
    }

    // Otherwise, parse the response body as JSON
    const responseBody = response.data; // Update this line

    // Return the generated completion text in the HTTP response
    context.res = {
        status: 200,
        body: responseBody.choices[0].message.content
    };
};
